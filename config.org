

#+BEGIN_SRC emacs-lisp
  (use-package emacs
    :config
    (setq frame-title-format '("emacs"))

    (tool-bar-mode -1)
    (menu-bar-mode -1)

    ;; Disable startup screen
    (setq inhibit-startup-screen t))

  (use-package emacs
    :ensure nil
    :preface
    (defun split-and-follow-vertically ()
      "Split window right."
      (interactive)
      (split-window-right)
      (other-window 1))
    :config
    (global-set-key (kbd "C-x 3") #'split-and-follow-vertically))
#+END_SRC

*** Delsel
#+BEGIN_SRC emacs-lisp
  (use-package delsel
    :ensure nil
    :config (delete-selection-mode +1))
#+END_SRC

*** Disable scroll-bar
#+BEGIN_SRC emacs-lisp
  (use-package scroll-bar
    :ensure nil
    :config (scroll-bar-mode -1))
#+END_SRC

*** Enable column numbers
#+BEGIN_SRC emacs-lisp
  (use-package simple
    :ensure nil
    :config (column-number-mode +1))
#+END_SRC
*** Better defaults
#+BEGIN_SRC emacs-lisp
  (use-package better-defaults)
#+END_SRC

*** Theme
#+BEGIN_SRC emacs-lisp
  (use-package material-theme :config (load-theme 'material t))
#+END_SRC

*** Flycheck
#+BEGIN_SRC emacs-lisp
    (use-package flycheck
      :config (global-flycheck-mode +1))
#+END_SRC

* Programming stuff
** Python
*** Python-mode
    Just use python-mode hook to set up flake8 as checker
#+BEGIN_SRC emacs-lisp
  (use-package python
    :ensure nil
    :hook (python-mode . (lambda () (flycheck-add-next-checker 'lsp 'python-flake8))))
#+END_SRC

*** LSP - Pyright
#+BEGIN_SRC emacs-lisp
  ;; (use-package lsp-pyright
  ;;   :ensure t
  ;;   :hook (python-mode . (lambda ()
  ;;                          (require 'lsp-pyright)
  ;;                          (lsp))))  ; or lsp-deferred
#+END_SRC

*** LSP - MS
#+BEGIN_SRC emacs-lisp
  (use-package lsp-python-ms
    :ensure t
    :init (setq lsp-python-ms-auto-install-server t)
    :hook (python-mode . (lambda ()
                            (require 'lsp-python-ms)
                            (lsp))))  ; or lsp-deferred
#+END_SRC

*** LSP-mode
#+BEGIN_SRC emacs-lisp
  (use-package lsp-ui)
#+END_SRC

*** Pyenv
#+BEGIN_SRC emacs-lisp
  (use-package pyvenv)
#+END_SRC

*** Black
#+BEGIN_SRC emacs-lisp
  (use-package python-black)

#+END_SRC

*** flyckeck config
#+BEGIN_SRC emacs-lisp
  (flycheck-define-checker python-flake8
    "A Python syntax and style checker using Flake8.

  Requires Flake8 3.0 or newer. See URL
  `https://flake8.readthedocs.io/'."
    ;; Not calling flake8 directly makes it easier to switch between different
    ;; Python versions; see https://github.com/flycheck/flycheck/issues/1055.
    :command ("python3"
              (eval (flycheck-python-module-args 'python-flake8 "flake8"))
              "--format=default"
              (config-file "--append-config" flycheck-flake8rc)
              (option "--max-complexity" flycheck-flake8-maximum-complexity nil
                      flycheck-option-int)
              (option "--max-line-length" flycheck-flake8-maximum-line-length nil
                      flycheck-option-int)
              (eval (when buffer-file-name
                      (concat "--stdin-display-name=" buffer-file-name)))
              "-")
    :standard-input t
    :working-directory flycheck-flake8--find-project-root
    :error-filter (lambda (errors)
                    (let ((errors (flycheck-sanitize-errors errors)))
                      (seq-map #'flycheck-flake8-fix-error-level errors)))
    :error-patterns
    ((warning line-start
              (file-name) ":" line ":" (optional column ":") " "
              (id (one-or-more (any alpha)) (one-or-more digit)) " "
              (message (one-or-more not-newline))
              line-end))
    :enabled (lambda ()
               (or (not (flycheck-python-needs-module-p 'python-flake8))
                   (flycheck-python-find-module 'python-flake8 "flake8")))
    :verify (lambda (_) (flycheck-python-verify-module 'python-flake8 "flake8"))
    :modes python-mode)
#+END_SRC

*** Treemacs
#+BEGIN_SRC emacs-lisp
  (use-package treemacs
    :init
    (with-eval-after-load 'winum
      (define-key winum-keymap (kbd "M-0") #'treemacs-select-window))
    :config
    (progn
      (setq treemacs-collapse-dirs                 (if treemacs-python-executable 3 0)
            treemacs-deferred-git-apply-delay      0.5
            treemacs-directory-name-transformer    #'identity
            treemacs-display-in-side-window        t
            treemacs-eldoc-display                 t
            treemacs-file-event-delay              5000
            treemacs-file-extension-regex          treemacs-last-period-regex-value
            treemacs-file-follow-delay             0.2
            treemacs-file-name-transformer         #'identity
            treemacs-follow-after-init             t
            treemacs-git-command-pipe              ""
            treemacs-goto-tag-strategy             'refetch-index
            treemacs-indentation                   2
            treemacs-indentation-string            " "
            treemacs-is-never-other-window         nil
            treemacs-max-git-entries               5000
            treemacs-missing-project-action        'ask
            treemacs-move-forward-on-expand        nil
            treemacs-no-png-images                 nil
            treemacs-no-delete-other-windows       t
            treemacs-project-follow-cleanup        nil
            treemacs-persist-file                  (expand-file-name ".cache/treemacs-persist" user-emacs-directory)
            treemacs-position                      'left
            treemacs-read-string-input             'from-child-frame
            treemacs-recenter-distance             0.1
            treemacs-recenter-after-file-follow    nil
            treemacs-recenter-after-tag-follow     nil
            treemacs-recenter-after-project-jump   'always
            treemacs-recenter-after-project-expand 'on-distance
            treemacs-show-cursor                   nil
            treemacs-show-hidden-files             t
            treemacs-silent-filewatch              nil
            treemacs-silent-refresh                nil
            treemacs-sorting                       'alphabetic-asc
            treemacs-space-between-root-nodes      t
            treemacs-tag-follow-cleanup            t
            treemacs-tag-follow-delay              1.5
            treemacs-user-mode-line-format         nil
            treemacs-user-header-line-format       nil
            treemacs-width                         35
            treemacs-workspace-switch-cleanup      nil)

      ;; The default width and height of the icons is 22 pixels. If you are
      ;; using a Hi-DPI display, uncomment this to double the icon size.
      ;;(treemacs-resize-icons 44)

      (treemacs-follow-mode t)
      (treemacs-filewatch-mode t)
      (treemacs-fringe-indicator-mode 'always)
      (pcase (cons (not (null (executable-find "git")))
                   (not (null treemacs-python-executable)))
        (`(t . t)
         (treemacs-git-mode 'deferred))
        (`(t . _)
         (treemacs-git-mode 'simple))))
    :bind
    (:map global-map
          ("M-0"       . treemacs-select-window)
          ("C-x t 1"   . treemacs-delete-other-windows)
          ("C-x t t"   . treemacs)
          ("C-x t B"   . treemacs-bookmark)
          ("C-x t C-t" . treemacs-find-file)
          ("C-x t M-t" . treemacs-find-tag)))

  (use-package treemacs-projectile
    :after (treemacs projectile))

  (use-package treemacs-magit
    :after (treemacs magit))

  (use-package lsp-treemacs
    :after (treemacs lsp))
#+END_SRC
