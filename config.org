* Readme
My personal emacs config, mainly used for VHDL and Python.
Inspired by: https://github.com/ianyepan/yay-evil-emacs

Some python tools requires an environment to run in.
Create one and install the requirements by:
#+BEGIN_SRC bash
  cd ~/.emacs.d
  python3 -m venv pyenv
  source pyenv/bin/activate
  pip install -r requirements.txt
#+END_SRC
* General Improvements
*** Cleanup frame
#+BEGIN_SRC emacs-lisp
  (use-package emacs
    :config
    (setq frame-title-format '("emacs"))
    (tool-bar-mode -1) ;; Disable tool bar
    (menu-bar-mode -1) ;; Disable menu bar
    (setq inhibit-startup-screen t) ;; Disable startup screen
    (setq initial-frame-alist '((fullscreen . maximized))))
#+END_SRC
*** Set font
#+BEGIN_SRC emacs-lisp
  (use-package emacs
    :ensure nil
    :config
    (when (member "DejaVu Sans Mono" (font-family-list))
      (set-frame-font "DejaVu Sans Mono" t t))
    )
#+END_SRC
*** Custom split
#+BEGIN_SRC emacs-lisp
  (use-package emacs
    :ensure nil
    :preface
    (defun split-and-follow-vertically ()
      "Split window right."
      (interactive)
      (split-window-right)
      (other-window 1))
    :config
    (global-set-key (kbd "C-x 3") #'split-and-follow-vertically))
#+END_SRC

*** Delsel
This file makes the active region be pending delete, meaning that
text inserted while the region is active will replace the region contents.
This is a popular behavior of personal computers text editors.
#+BEGIN_SRC emacs-lisp
  (use-package delsel
    :ensure nil
    :config (delete-selection-mode +1))
#+END_SRC

*** Disable scroll-bar
#+BEGIN_SRC emacs-lisp
  (use-package scroll-bar
    :ensure nil
    :config (scroll-bar-mode -1))
#+END_SRC

*** Column & Line numbers
#+BEGIN_SRC emacs-lisp
  (use-package simple
    :ensure nil
    :config
    (column-number-mode +1)
    (global-display-line-numbers-mode -1))
#+END_SRC

*** Theme
#+BEGIN_SRC emacs-lisp
  ;;(use-package material-theme :config (load-theme 'material t))
  ;;(use-package solarized-theme :config (load-theme 'solarized-dark t))
  (use-package doom-themes :config (load-theme 'doom-one t))
#+END_SRC

*** ErgoEmacs
ErgoEmacs keybindings improves GNU Emacs for people who did not grow up with emacs.
User interface is based on common modern software interface familiar to most people today,
such as using 【Ctrl+C】 key for Copy,【Ctrl+Z】 for undo, 【Ctrl+O】 for Open file.
#+BEGIN_SRC emacs-lisp
  (use-package ergoemacs-mode
    :config
    (setq ergoemacs-variant nil)
    (ergoemacs-mode -1))
#+END_SRC

*** yolo
Kill processes without confirmation, disable backup and lock files
#+BEGIN_SRC emacs-lisp
  (use-package files
    :ensure nil
    :config
    (setq confirm-kill-processes nil
          create-lockfiles nil
          make-backup-files nil))
#+END_SRC

*** Autorevert
Auto refreshes every 2 seconds to detect changes outside emacs
#+BEGIN_SRC emacs-lisp
  (use-package autorevert
    :ensure nil
    :config
    (global-auto-revert-mode +1)
    (setq auto-revert-interval 2
          auto-revert-check-vc-info t
          global-auto-revert-non-file-buffers t
          auto-revert-verbose nil))
#+END_SRC

*** Ediff
side-by-side default for ediff.
#+BEGIN_SRC emacs-lisp
  (use-package ediff
    :ensure nil
    :config
    (setq ediff-window-setup-function #'ediff-setup-windows-plain)
    (setq ediff-split-window-function #'split-window-horizontally))
#+END_SRC

*** Clean up whitespaces
#+BEGIN_SRC emacs-lisp
  (use-package whitespace
    :ensure nil
    :hook (before-save . whitespace-cleanup))
    #+END_SRC

*** Good Scroll
#+BEGIN_SRC emacs-lisp
  ;;     (use-package good-scroll
  ;; :hook (after-init . good-scroll-mode))
#+END_SRC

*** Ignore custom set variables
#+BEGIN_SRC emacs-lisp
  (use-package cus-edit
    :ensure nil
    :config
    (setq custom-file (concat user-emacs-directory "to-be-dumped.el")))
#+END_SRC

* Programming stuff
** Common
*** Company
Company is a text completion framework for Emacs. The name stands for "complete anything".
It uses pluggable back-ends and front-ends to retrieve and display completion candidates.
#+BEGIN_SRC emacs-lisp
  (use-package company
    :diminish company-mode
    :hook (prog-mode . company-mode)
    ;; :config
    ;; (setq company-minimum-prefix-length 1
    ;;       company-idle-delay 0.1
    ;;       company-selection-wrap-around t
    ;;       company-tooltip-align-annotations t
    ;;       company-frontends '(company-pseudo-tooltip-frontend ; show tooltip even for single candidate
    ;;                           company-echo-metadata-frontend))
    ;; (define-key company-active-map (kbd "C-n") 'company-select-next)
    ;; (define-key company-active-map (kbd "C-p") 'company-select-previous)
    )
#+END_SRC

*** Auto-pairing quotes and parentheses etc.
#+BEGIN_SRC emacs-lisp
  (use-package elec-pair
    :ensure nil
    :hook (prog-mode . electric-pair-mode))
#+END_SRC

*** Magit
#+BEGIN_SRC emacs-lisp
  (use-package magit)

  #+END_SRC

*** LSP-mode
#+BEGIN_SRC emacs-lisp
  (use-package lsp-mode)
  (use-package lsp-ui)
#+END_SRC

*** Flycheck
   Used to mark errors live in buffers
#+BEGIN_SRC emacs-lisp
  (use-package flycheck
    :config
    (global-flycheck-mode +1)
    (setq flycheck-python-flake8-executable "~/.emacs.d/pyenv/bin/python"
          flycheck-python-pylint-executable "~/.emacs.d/pyenv/bin/python"))
#+END_SRC

*** Diff hl
diff-hl-mode highlights uncommitted changes on the left side of the window (area also known as the "gutter"),
allows you to jump between and revert them selectively.
#+BEGIN_SRC emacs-lisp
  (use-package diff-hl
    :diminish diff-hl
    :config
    (global-diff-hl-mode 1))
#+END_SRC

** VHDL
*** LSP - GHDL
#+BEGIN_SRC emacs-lisp
  ;; (use-package lsp-mode
  ;;     :demand t
  ;;     :config
  ;;     (setq lsp-vhdl-server-path (executable-find "ghdl-ls")
  ;;           lsp-vhdl-server 'ghdl-ls
  ;;           lsp-use-native-json t
  ;;           lsp-enable-indentation t
  ;;           lsp-keep-workspace-alive t
  ;;           lsp-enable-folding t
  ;;           lsp-enable-xref t
  ;;           lsp-prefer-flymake nil
  ;;           lsp-auto-configure t
  ;;           lsp-enable-snippet nil
  ;;           lsp-restart 'auto-restart
  ;;           lsp-enable-completion-at-point t
  ;;           lsp-enable-imenu nil
  ;;           )

  ;;     (add-hook 'vhdl-mode-hook 'lsp))
#+END_SRC

*** LSP - Rust hdl
#+BEGIN_SRC emacs-lisp
  ;; (use-package lsp-mode
  ;;   :demand t
  ;;   :config
  ;;   (setq lsp-vhdl-server-path (executable-find "vhdl_ls")
  ;;         lsp-vhdl-server 'vhdl-ls
  ;;         lsp-use-native-json t
  ;;         lsp-enable-indentation t
  ;;         lsp-keep-workspace-alive t
  ;;         lsp-enable-folding t
  ;;         lsp-enable-xref t
  ;;         lsp-prefer-flymake nil
  ;;         lsp-auto-configure t
  ;;         lsp-enable-snippet nil
  ;;         lsp-restart 'auto-restart
  ;;         lsp-enable-completion-at-point t
  ;;         lsp-enable-imenu nil
  ;;         )

  ;;   (add-hook 'vhdl-mode-hook 'lsp))
#+END_SRC

*** LSP GHDL + Rust hdl
#+BEGIN_SRC emacs-lisp
  (use-package lsp-mode
    :demand t
    :config
    ;; Register vhdl-ls(rust_hdl) as a add-on checker
    (lsp-register-client
     (make-lsp-client :new-connection (lsp-stdio-connection (executable-find "vhdl_ls"))
                      :major-modes '(vhdl-mode)
                      :server-id 'vhdl-lsp
                      :add-on? t))
    (add-to-list 'lsp-language-id-configuration '(vhdl-mode . "vhdl-mode"))
    (setq lsp-vhdl-server-path (executable-find "ghdl-ls")
          lsp-vhdl-server 'ghdl-ls
          lsp-use-native-json t
          lsp-enable-indentation t
          lsp-keep-workspace-alive t
          lsp-enable-folding t
          lsp-enable-xref t
          lsp-prefer-flymake nil
          lsp-auto-configure t
          lsp-enable-snippet nil
          lsp-restart 'auto-restart
          lsp-enable-completion-at-point t
          lsp-enable-imenu nil
          )

    (add-hook 'vhdl-mode-hook 'lsp))
#+END_SRC

*** VHDL-Mode
#+BEGIN_SRC emacs-lisp
  (use-package vhdl-mode
    :ensure nil
    :preface
    ;; Disable lsp-mode before beautify, workaround to avoid ghdl-ls freeze
    (defun vhdl-beautify-buffer-lsp ()
      (interactive)
      (lsp-disconnect)
      (vhdl-beautify-buffer)
      (lsp))
    (defun vhdl-beautify-region-lsp (beg end)
      (interactive "r")
      (lsp-disconnect)
      (vhdl-beautify-region beg end)
      (lsp))
    :config
    (setq vhdl-stutter-mode t
          vhdl-electric-mode t
          vhdl-indent-tabs-mode nil
          vhdl-basic-offset 3
          vhdl-use-direct-instantiation 'always
          vhdl-clock-edge-condition 'function
          vhdl-clock-name "clk"
          vhdl-reset-name "reset"
          vhdl-clock-rising-edge t
          vhdl-reset-active-high t
          vhdl-reset-kind 'sync
          vhdl-prompt-for-comments nil
          vhdl-self-insert-comments nil
          vhdl-highlight-special-words t
          )
    :bind (
           :map vhdl-mode-map
           ("C-c C-b" . vhdl-beautify-buffer-lsp)
           ("C-c M-b" . vhdl-beautify-region-lsp)))
#+END_SRC

** Python
*** LSP - Pyright
#+BEGIN_SRC emacs-lisp
  ;; (use-package lsp-pyright
  ;;   :ensure t
  ;;   :hook (python-mode . (lambda ()
  ;;                          (require 'lsp-pyright)
  ;;                          (lsp))))  ; or lsp-deferred
#+END_SRC

*** LSP - MS
#+BEGIN_SRC emacs-lisp
  (use-package lsp-python-ms
    :ensure t
    :init (setq lsp-python-ms-auto-install-server t)
    :hook
    (python-mode . (lambda ()
                     (setq lsp-python-ms-python-executable "~/.emacs.d/pyenv/bin/python")
                     (setq lsp-python-ms-executable "~/.emacs.d/.cache/lsp/mspyls/Microsoft.Python.LanguageServer")
                     (require 'lsp-python-ms)
                     (lsp)
                     (sleep-for 1)
                     (flycheck-remove-next-checker 'python-flake8 'python-mypy)
                     ;;(flycheck-remove-next-checker 'python-flake8 'python-pylint)
                     (flycheck-add-next-checker 'lsp 'python-flake8)))  ; or lsp-deferred
    )
#+END_SRC

*** Black
#+BEGIN_SRC emacs-lisp
  (use-package python-black
    :config
    (setq python-black-command "~/.emacs.d/pyenv/bin/black"
          python-black-macchiato-command "~/.emacs.d/pyenv/bin/black-macchiato"))
#+END_SRC
*** Python Mode
#+BEGIN_SRC emacs-lisp
    (use-package python-mode
      :ensure nil
      :bind (:map python-mode-map ("C-c C-b" . python-black-buffer)
                  ("C-c M-b" . python-black-region)))
#+END_SRC
*** Pyenv
#+BEGIN_SRC emacs-lisp
  (use-package pyvenv)
#+END_SRC

** Groovy
#+BEGIN_SRC emacs-lisp
    (use-package groovy-mode)
#+END_SRC

** Web
Markdown mode and Web mode, the latter covers our usages of HTML/CSS/JS/JSX/TS/TSX/JSON.
#+BEGIN_SRC emacs-lisp
  (use-package markdown-mode
    :hook (markdown-mode . visual-line-mode))

  (use-package web-mode
    :mode (("\\.html?\\'" . web-mode)
           ("\\.css\\'"   . web-mode)
           ("\\.jsx?\\'"  . web-mode)
           ("\\.tsx?\\'"  . web-mode)
           ("\\.json\\'"  . web-mode))
    :config
    (setq web-mode-markup-indent-offset 2) ; HTML
    (setq web-mode-css-indent-offset 2)    ; CSS
    (setq web-mode-code-indent-offset 2)   ; JS/JSX/TS/TSX
    (setq web-mode-content-types-alist '(("jsx" . "\\.js[x]?\\'"))))

  (use-package xml
    :config
    (setq nxml-attribute-indent 3)
    (setq nxml-child-indent 3)
    (setq nxml-outline-child-indent 3))

#+END_SRC

* Other stuff
*** Treemacs
#+BEGIN_SRC emacs-lisp
  (use-package treemacs
    :init
    (with-eval-after-load 'winum
      (define-key winum-keymap (kbd "M-0") #'treemacs-select-window))
    :config
    (progn
      (setq treemacs-collapse-dirs                 (if treemacs-python-executable 3 0)
            treemacs-deferred-git-apply-delay      0.5
            treemacs-directory-name-transformer    #'identity
            treemacs-display-in-side-window        t
            treemacs-eldoc-display                 t
            treemacs-file-event-delay              5000
            treemacs-file-extension-regex          treemacs-last-period-regex-value
            treemacs-file-follow-delay             0.2
            treemacs-file-name-transformer         #'identity
            treemacs-follow-after-init             t
            treemacs-git-command-pipe              ""
            treemacs-goto-tag-strategy             'refetch-index
            treemacs-indentation                   2
            treemacs-indentation-string            " "
            treemacs-is-never-other-window         nil
            treemacs-max-git-entries               5000
            treemacs-missing-project-action        'ask
            treemacs-move-forward-on-expand        nil
            treemacs-no-png-images                 nil
            treemacs-no-delete-other-windows       t
            treemacs-project-follow-cleanup        nil
            treemacs-persist-file                  (expand-file-name ".cache/treemacs-persist" user-emacs-directory)
            treemacs-position                      'left
            treemacs-read-string-input             'from-child-frame
            treemacs-recenter-distance             0.1
            treemacs-recenter-after-file-follow    nil
            treemacs-recenter-after-tag-follow     nil
            treemacs-recenter-after-project-jump   'always
            treemacs-recenter-after-project-expand 'on-distance
            treemacs-show-cursor                   nil
            treemacs-show-hidden-files             t
            treemacs-silent-filewatch              nil
            treemacs-silent-refresh                nil
            treemacs-sorting                       'alphabetic-asc
            treemacs-space-between-root-nodes      t
            treemacs-tag-follow-cleanup            t
            treemacs-tag-follow-delay              1.5
            treemacs-user-mode-line-format         nil
            treemacs-user-header-line-format       nil
            treemacs-width                         35
            treemacs-workspace-switch-cleanup      nil)

      ;; The default width and height of the icons is 22 pixels. If you are
      ;; using a Hi-DPI display, uncomment this to double the icon size.
      ;;(treemacs-resize-icons 44)

      (treemacs-follow-mode t)
      (treemacs-filewatch-mode t)
      (treemacs-fringe-indicator-mode 'always)
      (pcase (cons (not (null (executable-find "git")))
                   (not (null treemacs-python-executable)))
        (`(t . t)
         (treemacs-git-mode 'deferred))
        (`(t . _)
         (treemacs-git-mode 'simple))))
    :bind
    (:map global-map
          ("M-0"       . treemacs-select-window)
          ("C-x t 1"   . treemacs-delete-other-windows)
          ("C-x t t"   . treemacs)
          ("C-x t B"   . treemacs-bookmark)
          ("C-x t C-t" . treemacs-find-file)
          ("C-x t M-t" . treemacs-find-tag)))

  (use-package treemacs-projectile
    :after (treemacs projectile))

  (use-package treemacs-magit
    :after (treemacs magit))

  (use-package lsp-treemacs
    :after (treemacs lsp))
#+END_SRC

*** Dashboard
#+BEGIN_SRC emacs-lisp
  (use-package dashboard
    :config
    (dashboard-setup-startup-hook)
    (setq dashboard-startup-banner 'logo
          dashboard-banner-logo-title "emacs"
          dashboard-items nil
          dashboard-set-footer nil))
#+END_SRC

*** Ido
Lets you interactively do things with buffers and files. As an example, while searching for a file with C-x C-f,
ido can helpfully suggest the files whose paths are closest to your current string, allowing you to find your files more quickly.
#+BEGIN_SRC emacs-lisp
  (use-package ido
    :config
    (ido-mode +1)
    (setq ido-everywhere t
          ido-enable-flex-matching t))

  (use-package ido-vertical-mode
    :config
    (ido-vertical-mode +1)
    (setq ido-vertical-define-keys 'C-n-C-p-up-and-down))

  (use-package ido-completing-read+
    :config (ido-ubiquitous-mode +1))

  (use-package flx-ido
    :config (flx-ido-mode +1))
#+END_SRC

*** Org Mode
Some minimal org mode tweaks: org-bullets gives our headings (h1, h2,
h3...) a more visually pleasing look.
#+BEGIN_SRC emacs-lisp
  (use-package org
    :hook ((org-mode . visual-line-mode)
           (org-mode . org-indent-mode)))

  (use-package org-bullets :hook (org-mode . org-bullets-mode))
#+END_SRC

*** Elpa mirror
#+BEGIN_SRC emacs-lisp
  (use-package elpa-mirror
    :config
    (setq elpamr-enable-log t)
    (setq elpamr-default-output-directory "~/.emacs.d/packages")
    )
#+END_SRC

*** Diminish
The diminish package is used to hide unimportant minor modes in the
modeline.
#+BEGIN_SRC emacs-lisp
  (use-package diminish
    :demand t)
#+END_SRC

*** Which-key
Provides us with hints on available keystroke combinations.
#+BEGIN_SRC emacs-lisp
  (use-package which-key
    :diminish which-key-mode
    :config
    (which-key-mode +1)
    (setq which-key-idle-delay 0.4
          which-key-idle-secondary-delay 0.4))
#+END_SRC

*** Centaur Tabs
Aesthetic, modern looking customizable tabs plugin
#+BEGIN_SRC emacs-lisp
  ;; (use-package centaur-tabs
  ;;   :demand
  ;;   :config
  ;;   (centaur-tabs-mode t)
  ;;   :bind
  ;;   ("C-<prior>" . centaur-tabs-backward)
  ;;   ("C-<next>" . centaur-tabs-forward))
#+END_SRC
